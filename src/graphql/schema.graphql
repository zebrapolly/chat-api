type Chat {
    id: ID!
    title: String
    lastMessage: Message
    participants: [User]
    messages: [Message]
}

type Message {
    id: ID!
    author: User
    text: String
    timestamp: String
}

type User {
    id: ID!
    nick: String!
}

type Query {
  getChats: [Chat]!
  getChat(id: ID!): Chat
}


input MessageInput {
  chatId: ID
  authorId: String
  text: String
}

type Mutation {
  createChat(title: String): Chat
  deleteChat(id: ID): Chat
  createMessage(messageInput: MessageInput): Message
}

type Subscription {
  chatsUpdated: ChatsSubscription
  messagesUpdated(id: ID): MessagesSubscription
}

type ChatsSubscription {
  chat: Chat
  type: ChatsUpdateType
}

type MessagesSubscription {
  chatId: ID
  message: Message
  type: ChatsUpdateType
}

enum ChatsUpdateType {
  DELETED
  UPDATED
  CREATED
}